<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Тестування продавців-консультантів</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            height: 100vh;
            display: flex;
            justify-content: flex-end;
            align-items: center;
            flex-direction: column;
            overflow: auto;
            padding-top: env(safe-area-inset-top, 20px);
            background-color: #ffffff;
            color: #333;
        }
        h1 {
            color: #2c3e50;
            text-align: center;
            padding: 5px;
            font-size: 24px;
        }
        .chat-container {
        background-color: rgb(255, 255, 255);
        border-radius: 10px 10px 0 0;
        box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
        padding: 10px 15px;
        height: 30vh;
        min-height: 100px;
        overflow-y: auto;
        margin-bottom: 0;
        display: flex;
        flex-direction: column;
        width: 50%;
        max-width: 50vw;
        }

        #top-area {
        position: fixed;
        top: env(safe-area-inset-top, 0);
        left: 0;
        width: 100%;
        background-color: #ffffff;
        z-index: 1000;
        padding: calc(env(safe-area-inset-top, 0) + 10px) 0 10px 0;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 5px;
        min-height: 70px;
        }
        .message {
            margin-bottom: 15px;
            padding: 10px 15px;
            border-radius: 18px;
            max-width: 80%;
            line-height: 1.4;
        }
        .bot-message {
            background-color: #e3f2fd;
            align-self: flex-start;
            border-bottom-left-radius: 5px;
        }
        .user-message {
            background-color: #007bff;
            color: white;
            align-self: flex-end;
            border-bottom-right-radius: 5px;
            margin-left: auto;
        }
        .input-area {
            display: flex;
            gap: 10px;
            padding: 15px;
            width: 50%;
            box-sizing: border-box;
            background-color: white;
            border-radius: 0 0 10px 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        #user-input {
            flex-grow: 1;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 20px;
            box-sizing: border-box;
            font-size: 16px;
        }
        #send-button {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 0 20px;
            border-radius: 20px;
            box-sizing: border-box;
            cursor: pointer;
            font-size: 16px;
        }
        #send-button:hover {
            background-color: #0056b3;
        }
        #send-button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
        .status {
        font-style: italic;
        font-size: 14px;
        color: #5f5f5f;
        background: transparent;
        padding: 4px 10px;
        border-radius: 8px;
        pointer-events: none;
        z-index: 10;
        position: static; /* більше не absolute */
}
        .typing-indicator {
            display: inline-block;
            padding: 10px;
        }
        .typing-dot {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: #999;
            margin: 0 2px;
            animation: typingAnimation 1.4s infinite ease-in-out;
        }
        .typing-dot:nth-child(1) { animation-delay: 0s; }
        .typing-dot:nth-child(2) { animation-delay: 0.2s; }
        .typing-dot:nth-child(3) { animation-delay: 0.4s; }
        @keyframes typingAnimation {
            0%, 60%, 100% { transform: translateY(0); }
            30% { transform: translateY(-5px); }
        }
        #restart-button {
            display: none;
            position: fixed;
            top: 15px;
            right: 15px;
            z-index: 9999;
            background-color: #ff4d4f;
            color: white;
            border: none;
            border-radius: 8px;
            padding: 10px 14px;
            font-size: 14px;
            cursor: pointer;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        #restart-button:hover {
            background-color: #218838;
        }
        /* Стилі для кнопок вибору моделей */
        #models-container {
            display: none;
            margin-top: 15px;
            text-align: center;
        }
        #models-buttons {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            justify-content: center;
            margin-top: 10px;
        }
        .model-button {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.3s;
        }
        .model-button:hover {
            background-color: #45a049;
            
        }
        .progress-hint {
            margin-bottom: 3px;
            margin-top: 3px;       /* відступ зверху від прогрес бару */
            color: #003366;
            font-size: 10px;
            background-color: transparent;
            max-width: 50%;
            text-align: center;    /* текст по центру */
            opacity: 1;
            transition: opacity 0.5s ease;
        }

        .progress-container {
        margin-top: 10px;
        width: 50%;
        height: 10px;
        background-color: #eee;
        border-radius: 5px;
        margin-bottom: 10px;
        overflow: hidden;
        }

        .progress-bar {
        height: 100%;
        width: 0%;
        background-color: #4caf50; /* або інший колір */
        transition: width 0.3s ease-out;
        animation: pulse 1.5s infinite;
        }
        @keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.7; }
        100% { opacity: 1; }
        }

        .fade-out {
        opacity: 0;
        transition: opacity 1s ease-out;
        }

        .modal {
        position: fixed;
        z-index: 9999; /* поверх усього */
        left: 0; top: 0;
        width: 100%; height: 100%;
        background: rgba(0,0,0,0.6);
        display: flex;
        justify-content: center;
        align-items: center;
        opacity: 1;
            visibility: visible;
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }

        .modal.hidden {
            opacity: 0;
            visibility: hidden;
        }

        .modal-content {
        background: white;
        padding: 20px 30px;
        border-radius: 8px;
        max-width: 400px;
        text-align: left;
        }

        .modal-content h2 {
        margin-top: 0;
        }

        .modal-content ul {
        margin-bottom: 20px;
        padding-left: 20px;
        }

        .modal-content button {
        padding: 10px 15px;
        cursor: pointer;
        font-weight: bold;
        }

    /* Адаптивність для мобільних телефонів (до 600px) */
@media (max-width: 600px) {
    html, body {
        height: auto !important;
        overflow-y: auto !important;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;
        padding: 10px;
        box-sizing: border-box;
    }

    .chat-container,
    .input-area,
    .progress-container {
        width: 90% !important;
        max-width: 90vw !important;
        padding: 5px !important;
        box-sizing: border-box;
    }

    .chat-container {
        height: 35vh !important;
        min-height: 160px;
    }

    .input-area {
        flex-direction: column !important;
        align-items: stretch !important;
        gap: 8px !important;
    }

    #user-input {
        font-size: 18px !important;
        padding: 10px !important;
        width: 100% !important;
    }

    #send-button {
        padding: 12px !important;
        font-size: 18px !important;
        width: 100% !important;
    }

    #models-buttons {
        flex-direction: column !important;
        gap: 8px !important;
        align-items: stretch !important;
    }

    .model-button {
        width: 100% !important;
        font-size: 16px !important;
        padding: 12px !important;
    }

    h1 {
        font-size: 20px !important;
        padding: 10px 0 !important;
        text-align: center;
        width: 100%;
        box-sizing: border-box;
    }

    .status {
        font-size: 12px !important;
        text-align: center;
        padding: 0 10px;
    }

    #top-area {
        padding: 10px 5px !important;
        width: 100%;
        box-sizing: border-box;
        position: sticky;
        top: 0;
        background: white;
        z-index: 999;
    }
}

/* Адаптивність для планшетів (601px - 1024px) */
@media (min-width: 601px) and (max-width: 1024px) {
    html, body {
        align-items: center;
        justify-content: flex-start;
    }

    .chat-container,
    .input-area,
    .progress-container {
        width: 70% !important;
        max-width: 70vw !important;
        box-sizing: border-box;
    }

    #models-buttons {
        flex-wrap: wrap !important;
        justify-content: center !important;
    }

    .model-button {
        width: 48% !important;
        font-size: 15px !important;
    }

    h1 {
        font-size: 22px !important;
        text-align: center;
    }

    .status {
        font-size: 13px !important;
    }
}

    </style>
</head>
<body>
    <h1>Клієнт зайшов до Вашого магазину...</h1>
    
    <div class="chat-container" id="chat-container">
        <!-- Чат буде додаватись сюди -->
    </div>
    
    <div class="input-area">
        <input type="text" id="user-input" placeholder="Напишіть ваше повідомлення..." autocomplete="off">
        <button id="send-button">Надіслати</button>
    </div>
    
    <!-- Контейнер для вибору моделей -->
    <div id="models-container">
        <p id="models-prompt"></p>
        <div id="models-buttons">
            <!-- Кнопки моделей будуть додані динамічно -->
        </div>
    </div>

    <div id="top-area">
        <div id="status" class="status">Поставте перше питання клієнтові, дізнайтесь, для чого йому шуруповерт!</div>
        <div id="progressHint" class="progress-hint"></div>
        <div class="progress-container">
            <div class="progress-bar" id="questionProgressBar"></div>
        </div>
    </div>
    
    <div class="status" id="status"></div>

    <div style="text-align: center;">
        <button id="restart-button">Почати новий діалог</button>
    </div>

    <div id="rules-modal" class="modal">
  <div class="modal-content">
    <h2>Правила комунікації з ботом</h2>
    <ul>
      <li>Будьте ввічливими та конкретними.</li>
      <li>Ставте чіткі питання.</li>
      <li>Не використовуйте нецензурну лексику.</li>
      <li>Після 3-х непорозумінь сесія завершиться.</li>
      <li>Якщо виникають проблеми — натисніть "Почати заново".</li>
    </ul>
    <button id="accept-rules-btn">Я ознайомився і готовий</button>
  </div>
</div>

    <script>
    const chatContainer = document.getElementById('chat-container');
    const userInput = document.getElementById('user-input');
    const sendButton = document.getElementById('send-button');
    const statusElement = document.getElementById('status');
    const restartButton = document.getElementById('restart-button');
    const modelsContainer = document.getElementById('models-container');
    const modelsButtons = document.getElementById('models-buttons');
    const modelsPrompt = document.getElementById('models-prompt');
    const progressHint = document.getElementById('progressHint');
    const questionProgressBar = document.getElementById('questionProgressBar');
    const modal = document.getElementById('rules-modal');
    const acceptBtn = document.getElementById('accept-rules-btn');

    // Ініціалізація подій
    sendButton.addEventListener('click', sendMessage);
    userInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') sendMessage();
    });
    restartButton.addEventListener('click', () => window.location.reload());

    function blockChat() {
        userInput.disabled = true;
        sendButton.disabled = true;
        }

    function unblockChat() {
        userInput.disabled = false;
        sendButton.disabled = false;
        }

    acceptBtn.addEventListener('click', () => {
        modal.classList.add('hidden');

        setTimeout(() => {
        modal.style.display = 'none';
        unblockChat();
        userInput.focus();
    }, 300);
        unblockChat();
        userInput.focus();
    });

    function addMessage(text, isUser) {
        const messageDiv = document.createElement('div');
        messageDiv.classList.add('message');
        messageDiv.classList.add(isUser ? 'user-message' : 'bot-message');
        messageDiv.textContent = text;
        chatContainer.appendChild(messageDiv);
        chatContainer.scrollTop = chatContainer.scrollHeight;
    }

    function showTypingIndicator() {
        const typingDiv = document.createElement('div');
        typingDiv.classList.add('typing-indicator');
        typingDiv.id = 'typing-indicator';
        typingDiv.innerHTML = `
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
        `;
        chatContainer.appendChild(typingDiv);
        chatContainer.scrollTop = chatContainer.scrollHeight;
    }

    function hideTypingIndicator() {
        const typingIndicator = document.getElementById('typing-indicator');
        if (typingIndicator) typingIndicator.remove();
    }

    function disableChat() {
        userInput.disabled = true;
        sendButton.disabled = true;
        modelsContainer.style.display = 'none';
        statusElement.textContent = "Діалог завершено";
    }

    function showModelButtons(models, promptText = "Оберіть модель:", attemptsLeft = 1) {
        const modelData = {
            "CD-218Q": {
                image: "/static/218q.jpg",
                specs: ["24 Нм", "Швидкоз'ємний патрон", "Компактний, зручний, легкий"]
            },
            "CD-12QX": {
                image: "/static/qx.jpg",
                specs: ["25 Нм", "Повний комплект", "Для нескладних завдань"]
            },
            "CD-201HBC": {
                image: "/static/hbc.jpg",
                specs: ["45 Нм", "Безщітковий двигун", "Для роботи навіть із цеглою"]
            },
            "CD-200BC": {
                image: "/static/cd200bc.jpg",
                specs: ["60 Нм", "Металевий патрон", "Найсильніший шуруповерт"]
            }
        };

        modelsPrompt.textContent = `${promptText} (Спроб залишилося: ${attemptsLeft})`;
        modelsButtons.innerHTML = '';

        models.forEach(model => {
            const data = modelData[model];
            if (!data) return;

            const button = document.createElement('button');
            button.className = 'model-button';

            // Фото моделі
            const img = document.createElement('img');
            img.src = data.image;
            img.alt = model;
            img.style.width = '100px';
            img.style.display = 'block';
            img.style.margin = '0 auto 10px';
            button.appendChild(img);

            // Назва моделі
            const title = document.createElement('div');
            title.textContent = model;
            title.style.fontWeight = 'bold';
            title.style.textAlign = 'center';
            button.appendChild(title);

            // Характеристики
            const ul = document.createElement('ul');
            ul.style.paddingLeft = '20px';
            ul.style.marginTop = '8px';
            data.specs.forEach(spec => {
                const li = document.createElement('li');
                li.textContent = spec;
                ul.appendChild(li);
            });
            button.appendChild(ul);

            // Обробник кліку
            button.onclick = () => {
                addMessage(`Обираю модель: ${model}`, true);
                sendModelChoice(model);
            };

            modelsButtons.appendChild(button);
        });

        modelsContainer.style.display = 'block';
        userInput.style.display = 'none';
    }

    function hideModelButtons() {
        modelsContainer.style.display = 'none';
        userInput.style.display = 'block';
    }


    async function sendModelChoice(model) {
        hideModelButtons();
        showTypingIndicator();
        statusElement.textContent = "Обробка вибору моделі...";

        try {
            const response = await fetch('/chat', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({message: model}) // Відправляємо тільки назву моделі
            });

            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);

            const data = await response.json();
            addMessage(data.reply, false);

            if (data.show_models) {
                showModelButtons(data.models, "Оберіть іншу модель:", data.attempts_left);
            }

            if (data.chat_ended) {
                disableChat();
            }

            // Оновлення прогресу
            if (data.question_progress !== undefined) {
                updateProgressBar(data.question_progress);
            }

            if (data.show_restart_button) {
                document.getElementById("restart-button").style.display = "inline-block";
            } else {
                restartButton.style.display = "none";
            }

        } catch (error) {
            console.error("Помилка:", error);
            statusElement.textContent = "Помилка з'єднання";
        } finally {
            hideTypingIndicator();
        }
    }

    function updateProgressBar(progress) {
        const percent = Math.min(progress, 5) / 5 * 100;
        questionProgressBar.style.width = `${percent}%`;
        
        if (progress >= 5) {
            progressHint.textContent = "Достатньо питань! Тепер оберіть модель";
            progressHint.style.display = 'block';
        }

    }

   async function sendMessage() {
    const message = userInput.value.trim();
    if (!message) return;

    addMessage(message, true); // Повідомлення продавця
    userInput.value = '';
    showTypingIndicator();
    statusElement.textContent = "Клієнт набирає відповідь...";

    try {
        const response = await fetch('/chat', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({message})
        });

        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);

        const data = await response.json();

        // Обробка відповіді
        if (data.error) {
            statusElement.textContent = "Помилка: " + data.error;
            if (data.chat_ended) disableChat();
            return;
        }

        if (data.show_restart_button) {
            restartButton.style.display = "inline-block";
        } else {
            restartButton.style.display = "none";
        }

        // --- Нова логіка для етапу 3 (технічні питання) ---
        if (data.stage === 3) {
                // Просто додаємо одне питання — не розділяємо
            addMessage(data.reply, false);
            statusElement.textContent = "Клієнт уточнює деталі про модель...";
            userInput.focus();

            // Додаємо питання по одному з затримкою
            questions.forEach((question, index) => {
                setTimeout(() => {
                    addMessage(question, false);
                    // Прокручуємо чат до останнього повідомлення
                    chatContainer.scrollTop = chatContainer.scrollHeight;
                }, index * 1000); // Затримка 1 сек між питаннями
            });
        } else {
            // Для інших етапів - стандартна обробка
            addMessage(data.reply, false);
        }

        // Обробка етапу вибору моделі
        if (data.show_models) {
            showModelButtons(data.models, "Оберіть модель:", data.attempts_left);
        }

        // Оновлення статусу для етапу 3
        if (data.stage === 3) {
            statusElement.textContent = "Клієнт уточнює деталі про модель...";
            userInput.focus();
        }

        // Оновлення прогресу
        if (data.question_progress !== undefined) {
            updateProgressBar(data.question_progress);
        }

        // Завершення діалогу
        if (data.chat_ended) {
            disableChat();
            if (data.model_chosen) {
                setTimeout(() => {
                    addMessage("Дякую! Я беру цю модель.", false);
                }, 1000);
            }
        } else {
            statusElement.textContent = "";
        }

    } catch (error) {
        console.error("Помилка:", error);
        statusElement.textContent = "Помилка з'єднання";
        addMessage("Вибачте, сталася помилка. Спробуйте ще раз.", false);
    } finally {
        hideTypingIndicator();
    }
}

    // Стартове повідомлення при завантаженні
    window.onload = async function () {
        try {
            const response = await fetch("/start_chat");
            const data = await response.json();
            if (data.reply) addMessage(data.reply, false);
        } catch (err) {
            statusElement.textContent = "Помилка старту чату: " + err.message;
        }
    };

    window.addEventListener('DOMContentLoaded', () => {
        setTimeout(() => {
    const chatContainer = document.querySelector('.chat-container');
    
    const firstMessage = document.createElement('div');
    firstMessage.classList.add('message', 'user-message');
    firstMessage.textContent = 'Добрий день! Вітаємо Вас в магазині Dnipro-M!';
    
    chatContainer.appendChild(firstMessage);
    } , 1000);
  });

    // Події кнопки і Enter
    sendButton.addEventListener('click', sendMessage);
    userInput.addEventListener('keydown', function (e) {
        if (e.key === 'Enter') sendMessage();
    });
    </script>
</body>
</html>