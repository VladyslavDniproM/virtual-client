<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Тестування продавців-консультантів</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            height: 100vh;
            display: flex;
            justify-content: flex-end;
            align-items: center;
            flex-direction: column;
            overflow: hidden;
            background-color: #ffffff;
            color: #333;
        }
        h1 {
            color: #2c3e50;
            text-align: center;
            padding: 5px;
            font-size: 24px;
        }
        .chat-container {
        background-color: rgb(255, 255, 255);
        border-radius: 10px 10px 0 0;
        box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
        padding: 10px 15px;
        height: 30vh;
        min-height: 100px;
        overflow-y: auto;
        margin-bottom: 0;
        display: flex;
        flex-direction: column;
        width: 50%;
        max-width: 50vw;
        }

        #top-area {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            background-color: #ffffff;
            z-index: 1000;
            padding: 15px 0 10px 0;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 5px;
            min-height: 70px;
        }
        .message {
            margin-bottom: 15px;
            padding: 10px 15px;
            border-radius: 18px;
            max-width: 80%;
            line-height: 1.4;
        }
        .bot-message {
            background-color: #e3f2fd;
            align-self: flex-start;
            border-bottom-left-radius: 5px;
        }
        .user-message {
            background-color: #007bff;
            color: white;
            align-self: flex-end;
            border-bottom-right-radius: 5px;
            margin-left: auto;
        }
        .input-area {
            display: flex;
            gap: 10px;
            padding: 15px;
            width: 50%;
            background-color: white;
            border-radius: 0 0 10px 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        #user-input {
            flex-grow: 1;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 20px;
            font-size: 16px;
        }
        #send-button {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 0 20px;
            border-radius: 20px;
            cursor: pointer;
            font-size: 16px;
        }
        #send-button:hover {
            background-color: #0056b3;
        }
        #send-button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
        .status {
        font-style: italic;
        font-size: 14px;
        color: #5f5f5f;
        background: transparent;
        padding: 4px 10px;
        border-radius: 8px;
        pointer-events: none;
        z-index: 10;
        position: static; /* більше не absolute */
}
        .typing-indicator {
            display: inline-block;
            padding: 10px;
        }
        .typing-dot {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: #999;
            margin: 0 2px;
            animation: typingAnimation 1.4s infinite ease-in-out;
        }
        .typing-dot:nth-child(1) { animation-delay: 0s; }
        .typing-dot:nth-child(2) { animation-delay: 0.2s; }
        .typing-dot:nth-child(3) { animation-delay: 0.4s; }
        @keyframes typingAnimation {
            0%, 60%, 100% { transform: translateY(0); }
            30% { transform: translateY(-5px); }
        }
        #restart-button {
            display: none;
            position: fixed;
            top: 15px;
            right: 15px;
            z-index: 9999;
            background-color: #ff4d4f;
            color: white;
            border: none;
            border-radius: 8px;
            padding: 10px 14px;
            font-size: 14px;
            cursor: pointer;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        #restart-button:hover {
            background-color: #218838;
        }
        /* Стилі для кнопок вибору моделей */
        #models-container {
            display: none;
            margin-top: 15px;
            text-align: center;
        }
        #models-buttons {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            justify-content: center;
            margin-top: 10px;
        }
        .model-button {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.3s;
        }
        .model-button:hover {
            background-color: #45a049;
            
        }
        .progress-hint {
            margin-bottom: 3px;
            margin-top: 3px;       /* відступ зверху від прогрес бару */
            color: #003366;
            font-size: 10px;
            background-color: transparent;
            max-width: 50%;
            text-align: center;    /* текст по центру */
            opacity: 1;
            transition: opacity 0.5s ease;
        }

        .progress-container {
        margin-top: 10px;
        width: 50%;
        height: 10px;
        background-color: #eee;
        border-radius: 5px;
        margin-bottom: 10px;
        overflow: hidden;
        }

        .progress-bar {
        height: 100%;
        width: 0%;
        background-color: #4caf50; /* або інший колір */
        transition: width 0.3s ease-out;
        animation: pulse 1.5s infinite;
        }
        @keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.7; }
        100% { opacity: 1; }
    }
    </style>
</head>
<body>
    <h1>Клієнт зайшов до Вашого магазину...</h1>
    
    <div class="chat-container" id="chat-container">
        <!-- Чат буде додаватись сюди -->
    </div>
    
    <div class="input-area">
        <input type="text" id="user-input" placeholder="Напишіть ваше повідомлення..." autocomplete="off">
        <button id="send-button">Надіслати</button>
    </div>
    
    <!-- Контейнер для вибору моделей -->
    <div id="models-container">
        <p id="models-prompt"></p>
        <div id="models-buttons">
            <!-- Кнопки моделей будуть додані динамічно -->
        </div>
    </div>

    <div id="top-area">
        <div id="status" class="status">Поставте перше питання клієнтові, дізнайтесь, для чого йому шуруповерт!</div>
        <div id="progressHint" class="progress-hint"></div>
        <div class="progress-container">
            <div class="progress-bar" id="questionProgressBar"></div>
        </div>
    </div>
    
    <div class="status" id="status"></div>

    <div style="text-align: center;">
        <button id="restart-button">Почати новий діалог</button>
    </div>

    <script> 
        const chatContainer = document.getElementById('chat-container');
        const userInput = document.getElementById('user-input');
        const sendButton = document.getElementById('send-button');
        const statusElement = document.getElementById('status');
        const restartButton = document.getElementById('restart-button');
        const modelsContainer = document.getElementById('models-container');
        const modelsButtons = document.getElementById('models-buttons');
        const modelsPrompt = document.getElementById('models-prompt');

        function addMessage(text, isUser) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('message');
            messageDiv.classList.add(isUser ? 'user-message' : 'bot-message');
            messageDiv.textContent = text;
            chatContainer.appendChild(messageDiv);
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }

        function showTypingIndicator() {
            const typingDiv = document.createElement('div');
            typingDiv.classList.add('typing-indicator');
            typingDiv.id = 'typing-indicator';
            typingDiv.innerHTML = `
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
            `;
            chatContainer.appendChild(typingDiv);
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }

        function showProgressHint() {
            const progressHint = document.getElementById('progressHint');
            progressHint.textContent = `Питання зараховано ✅`;
            progressHint.style.display = 'block';
            progressHint.style.opacity = '1';
            // НЕ ставимо setTimeout тут
        }

        function hideTypingIndicator() {
            const typingIndicator = document.getElementById('typing-indicator');
            if (typingIndicator) {
                typingIndicator.remove();
            }
        }

        function disableChat() {
            userInput.disabled = true;
            sendButton.disabled = true;
            statusElement.textContent = " ";
            showRestartButton();
        }

        function showRestartButton() {
            const restartButton = document.getElementById('restart-button'); // тут правильний id
            restartButton.style.display = 'inline-block';
            restartButton.addEventListener('click', () => {
                window.location.reload();
            });
        }

        function showModelButtons(models) {
            const modelData = {
            "CD-218Q": {
                image: "/static/218q.jpg",
                specs: [
                "24 Нм",
                "Швидкоз'ємний патрон",
                "Компактний, зручний, легкий"
        ]
    },
            "CD-12QX": {
                image: "/static/qx.jpg",
                specs: [
                "25 Нм",
                "Повний комплект",
                "Для нескладних завдань"
        ]
    },
            "CD-201HBC Compact": {
                image: "/static/hbc.jpg",
                specs: [
                    "45 Нм",
                    "Безщітковий двигун",
                 "Для роботи навіть із цеглою"
        ]
    },
            "CD-200BC Ultra": {
                image: "/static/cd200bc.jpg",
                specs: [
                    "60 Нм",
                    "Металевий патрон",
                    "Найсильніший шуруповерт"
        ]
    }
};

    modelsButtons.innerHTML = '';

    models.forEach(model => { 
    const data = modelData[model];
    if (!data) return;

    const button = document.createElement('button');
    button.className = 'model-button';

    // Фото
    const img = document.createElement('img');
    img.src = data.image;
    img.alt = model;
    img.style.width = '100px';
    img.style.display = 'block';
    img.style.margin = '0 auto 10px auto';
    button.appendChild(img);

    // Назва моделі
    const title = document.createElement('div');
    title.textContent = model;
    title.style.fontWeight = 'bold';
    title.style.textAlign = 'center';
    button.appendChild(title);

    // Характеристики списком
    const ul = document.createElement('ul');
    ul.style.paddingLeft = '20px';
    data.specs.forEach(spec => {
        const li = document.createElement('li');
        li.textContent = spec;
        ul.appendChild(li);
    });
    button.appendChild(ul);

    // Клік по кнопці
    button.onclick = function() {
        addMessage(model, true);
        sendModelChoice(model);
        modelsButtons.innerHTML = '';
    };

    modelsButtons.appendChild(button);
});

    modelsContainer.style.display = 'block';
    userInput.style.display = 'none';
}

        function hideModelButtons() {
            modelsContainer.style.display = 'none';
            userInput.style.display = 'block';
        }

async function sendModelChoice(model) {
    hideModelButtons();
    showTypingIndicator();
    statusElement.textContent = "Обробка вибору моделі...";

    try {
        // Відправляємо серверу конкретну команду, наприклад:
            const response = await fetch('/chat', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ message: `Вибираю модель: ${model}` })
            });

        if (!response.ok) {
            const text = await response.text(); // ← отримаєш HTML чи помилку
            console.error("Сервер повернув помилку:", text);
            alert("Помилка з'єднання з сервером!");
            return;
        }

        const data = await response.json();

        if (data.error) {
            statusElement.textContent = "Помилка: " + data.error;
            if (data.chat_ended) disableChat();
        } else {
            if (data.reply) addMessage(data.reply, false);
            statusElement.textContent = "";
        }

    } catch (error) {
        statusElement.textContent = "Помилка з'єднання: " + error.message;
    } finally {
        hideTypingIndicator();
    }
}

async function sendMessage() {
    const message = userInput.value.trim();
    if (!message) return;

    addMessage(message, true); // показуємо повідомлення користувача
    userInput.value = '';
    statusElement.textContent = "Бот друкує відповідь...";
    showTypingIndicator();

    try {
        const response = await fetch('/chat', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ message })
        });
        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);

        const data = await response.json();

        // Обробка відповіді
        if (data.error) {
            statusElement.textContent = "Помилка: " + data.error;
            if (data.chat_ended) {
                disableChat();
            }
            return;
        }

        if (data.reply) {
            addMessage(data.reply, false); // відповідь бота
        }

        // Якщо є додаткові повідомлення
        if (data.second_message) {
            addMessage(data.second_message, false);
        }

        // Прогресбар
        if (data.question_progress !== undefined) {
            const correctedProgress = Math.min(data.question_progress, 5);
            const progressPercent = (correctedProgress / 5) * 100;
            document.getElementById('questionProgressBar').style.width = progressPercent + '%';

        }

        // Показ моделей (якщо треба)
        if (data.show_models) {
            showModelButtons(data.models);
        }

        // Якщо чат завершено
        if (data.chat_ended) {
            disableChat();
        } else {
            statusElement.textContent = "";
        }
    } catch (error) {
        statusElement.textContent = "Помилка з'єднання: " + error.message;
    } finally {
        hideTypingIndicator();
    }
}

    // Стартове повідомлення при завантаженні
    window.onload = async function () {
        try {
            const response = await fetch("/start_chat");
            const data = await response.json();
            if (data.reply) addMessage(data.reply, false);
        } catch (err) {
            statusElement.textContent = "Помилка старту чату: " + err.message;
        }
    };

    window.addEventListener('DOMContentLoaded', () => {
        setTimeout(() => {
    const chatContainer = document.querySelector('.chat-container');
    
    const firstMessage = document.createElement('div');
    firstMessage.classList.add('message', 'user-message');
    firstMessage.textContent = 'Добрий день! Вітаємо Вас в магазині Dnipro-M!';
    
    chatContainer.appendChild(firstMessage);
    } , 500);
  });

    // Події кнопки і Enter
    sendButton.addEventListener('click', sendMessage);
    userInput.addEventListener('keydown', function (e) {
        if (e.key === 'Enter') sendMessage();
    });
    </script>
</body>
</html>